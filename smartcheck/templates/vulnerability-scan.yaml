apiVersion: v1
kind: Service
metadata:
  name: vulnerability-scan-internal
  labels:
    name: vulnerability-scan
    chart: {{ template "smartcheck.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  ports:
    - port: 8081
      targetPort: 8081
      protocol: TCP
      name: internal
  selector:
    service: vulnerability-scan
    release: {{ .Release.Name }}

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "smartcheck.fullname" . }}-vulnerability-scan
  labels:
    name: {{ template "smartcheck.fullname" . }}-vulnerability-scan
    chart: {{ template "smartcheck.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
data:
  config.yaml: |
    clair:
      database:
        # Database driver
        type: pgsql
        options:
          # PostgreSQL Connection string
          # https://www.postgresql.org/docs/current/static/libpq-connect.html#LIBPQ-CONNSTRING
          # Username, password are provided via environment variables
          source: "postgres://vulnerability-db/vulnerabilitydb?sslmode=disable&connect_timeout=5"

          # Number of elements kept in the cache
          # Values unlikely to change (e.g. namespaces) are cached in order to save prevent needless roundtrips to the database.
          cachesize: 16384

          # 32-bit URL-safe base64 key used to encrypt pagination tokens
          # If one is not provided, it will be generated.
          # Multiple clair instances in the same cluster need the same value.
          # TODO make this a secret
          paginationkey: "XxoPtCUzrUv4JV5dS+yQ+MdW7yLEJnRMwigVY/bpgtQ="
      api:
        # v3 grpc/RESTful API server address
        port: 8081

        # Health server address
        # This is an unencrypted endpoint useful for load balancers to check to healthiness of the clair server.
        healthport: 8083

        # Deadline before an API request will respond with a 503
        timeout: 10s

        # Optional PKI configuration
        # If you want to easily generate client certificates and CAs, try the following projects:
        # https://github.com/coreos/etcd-ca
        # https://github.com/cloudflare/cfssl
        servername:
        cafile:
        keyfile:
        certfile:

      worker:
        namespace_detectors:
          - os-release
          - lsb-release
          - apt-sources
          - alpine-release
          - redhat-release

        feature_listers:
          - apk
          - dpkg
          - rpm

      updater:
        # Frequency the database will be updated with vulnerabilities from the default data sources
        # The value 0 disables the updater entirely.
        interval: "2h"
        enabledupdaters:
          - debian
          - ubuntu
          - rhel
          - oracle
          - alpine

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: vulnerability-scan
  labels:
    service: vulnerability-scan
    chart: {{ template "smartcheck.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ default 1 .Values.replicas.vulnerabilityScan }}
  template:
    metadata:
      labels:
        service: vulnerability-scan
        chart: {{ template "smartcheck.chart" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
    spec:
      containers:
        - name: vulnerability-scan
          {{- $imageDefaults := .Values.images.defaults }}
          {{- with .Values.images.vulnerabilityScan }}
          {{- if eq (default "" .registry) "-" }}
          image: {{ printf "%s:%s" (required ".repository is required!" .repository) (default $imageDefaults.tag .tag) | quote }}
          {{- else }}
          image: {{ printf "%s/%s:%s" (default $imageDefaults.registry .registry) .repository (default $imageDefaults.tag .tag) | quote }}
          {{- end }}
          imagePullPolicy: {{ default $imageDefaults.pullPolicy .pullPolicy }}
          {{- end }}
          ports:
            - containerPort: 8081
              name: internal
            - containerPort: 8083
              name: health
          readinessProbe:
            httpGet:
              path: /health
              port: 8083
            initialDelaySeconds: 300
            periodSeconds: 60
            timeoutSeconds: 5
            failureThreshold: 60
          args:
            - --log-level=debug
            - --insecure-tls=true # TODO what is the purpose of this? what is clair talking to that requires us to do this?
          env:
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: {{ template "smartcheck.fullname" . }}-vulnerability-db
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: {{ template "smartcheck.fullname" . }}-vulnerability-db
          volumeMounts:
            - name: config
              mountPath: /etc/clair
          resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.vulnerabilityScan) | indent 12 }}
      volumes:
        - name: config
          configMap:
            name: {{ template "smartcheck.fullname" . }}-vulnerability-scan
      nodeSelector:
{{ toYaml (default .Values.nodeSelector.defaults .Values.nodeSelector.vulnerabilityScan) | indent 8 }}
      tolerations:
{{ toYaml (default .Values.tolerations.defaults .Values.tolerations.vulnerabilityScan) | indent 8 }}
      restartPolicy: Always
