apiVersion: v1
kind: Service
metadata:
  name: contentsources # TODO rename after updating the proxy/nginx/argus-proxies.conf
  labels:
    name: registryviews
    chart: {{ template "smartcheck.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  ports:
    - port: 8080
      protocol: TCP
      name: external
  selector:
    service: registryviews
    release: {{ .Release.Name }}

---
apiVersion: v1
kind: Service
metadata:
  name: registryviews-internal
  labels:
    name: registryviews-internal
    chart: {{ template "smartcheck.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  ports:
    - port: 8081
      protocol: TCP
      name: internal
  selector:
    service: registryviews
    release: {{ .Release.Name }}

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: registryviews
  labels:
    service: registryviews
    chart: {{ template "smartcheck.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ default 1 .Values.replicas.registryviews }}
  template:
    metadata:
      labels:
        service: registryviews
        chart: {{ template "smartcheck.chart" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
    spec:
      containers:
        - name: registryviews
          {{- $imageDefaults := .Values.images.defaults }}
          {{- with .Values.images.registryviews }}
          {{- if eq (default "" .registry) "-" }}
          image: {{ printf "%s:%s" (required ".repository is required!" .repository) (default $imageDefaults.tag .tag) | quote }}
          {{- else }}
          image: {{ printf "%s/%s:%s" (default $imageDefaults.registry .registry) .repository (default $imageDefaults.tag .tag) | quote }}
          {{- end }}
          imagePullPolicy: {{ default $imageDefaults.pullPolicy .pullPolicy }}
          {{- end }}
          ports:
            - containerPort: 8080
              name: external
            - containerPort: 8081
              name: internal
            - containerPort: 8082
              name: metrics
            - containerPort: 8083
              name: health
          livenessProbe:
            httpGet:
              path: /health
              port: 8083
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /health
              port: 8083
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          args:
            - --internal-base=http://registryviews:8081
            - --authorization-url=http://auth-internal:8081
            - --scan-url=http://scan-internal:8081
            - --database-connection-string=postgres:host=db user=$(DB_USER) password=$(DB_PASSWORD) dbname=contentsourcesdb sslmode=disable connect_timeout=5 # seconds
            - --database-secret=$(DB_SECRET)
          env:
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: {{ template "smartcheck.fullname" . }}-db
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: {{ template "smartcheck.fullname" . }}-db
            - name: DB_SECRET
              valueFrom:
                secretKeyRef:
                  key: database-secret
                  name: {{ template "smartcheck.fullname" . }}-db
          resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.registryviews) | indent 12 }}
      nodeSelector:
{{ toYaml (default .Values.nodeSelector.defaults .Values.nodeSelector.registryviews) | indent 8 }}
      tolerations:
{{ toYaml (default .Values.tolerations.defaults .Values.tolerations.registryviews) | indent 8 }}
      restartPolicy: Always
