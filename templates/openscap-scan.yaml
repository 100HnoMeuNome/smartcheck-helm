apiVersion: v1
kind: Service
metadata:
  name: openscap-scan-internal
  labels:
    service: openscap-scan-internal
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    {{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
    {{- end }}{{/* range .Values.extraLabels */}}
spec:
  ports:
    - port: 8081
      protocol: TCP
      name: internal
  selector:
    service: openscap-scan
    release: {{ .Release.Name }}
---
{{ include "smartcheck.service.database.secret" (dict "Chart" .Chart "Values" .Values "Release" .Release "service" "openscapscan") }}

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: openscap-scan
  labels:
    service: openscap-scan
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    appVersion: {{ .Chart.AppVersion }}
    {{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
    {{- end }}{{/* range .Values.extraLabels */}}
spec:
  replicas: {{ default 1 .Values.replicas.openscapScan }}
  selector:
    matchLabels:
      service: openscap-scan
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        service: openscap-scan
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
        appVersion: {{ .Chart.AppVersion }}
        {{- range $k, $v := (default (dict) .Values.extraLabels) }}
        {{ $k }}: {{ quote $v }}
        {{- end }}{{/* range .Values.extraLabels */}}
    spec:
      automountServiceAccountToken: false
      {{- $securityContextEnabled := .Values.securityContext.enabled }}
      {{- $securityContext := default .Values.securityContext.default .Values.securityContext.openscapScan }}
      {{- $podSecurityContext := default .Values.securityContext.default.pod $securityContext.pod }}
      {{- $openscapScanContainerSecurityContext := default .Values.securityContext.default.container $securityContext.scanContainer }}
      {{- $openscapFeedConsumerContainerSecurityContext := default .Values.securityContext.default.container $securityContext.feedConsumerContainer}}
      {{- if $securityContextEnabled }}
      securityContext: {{ toYaml $podSecurityContext | nindent 8 }}
      {{- end }}{{/* if $securityContextEnabled */}}
      initContainers:
        - {{ include "smartcheck.db-initcontainer" (dict "Values" .Values "Chart" .Chart "Release" .Release "service" "openscapscan") | nindent 10 | trim }}

      {{- $imageDefaults := .Values.images.defaults }}
      {{- with .Values.images.openscapScan }}
      {{- $secret := (default (default "" $imageDefaults.imagePullSecret) .imagePullSecret) }}
      {{- if $secret }}
      imagePullSecrets:
        - name: {{ $secret | quote }}
      {{- end }}{{/* if $secret */}}
      containers:
        - name: openscap-scan
          {{- if $securityContextEnabled }}
          securityContext: {{ toYaml $openscapScanContainerSecurityContext | nindent 12 }}
          {{- end }}{{/* if $securityContextEnabled */}}
          {{- $project := (default (default "deepsecurity" $imageDefaults.project) .project) }}
          {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
          {{- $tag := (default $imageDefaults.tag .tag) }}
          image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
          {{- end }}{{/* with .Values.images.openscapScan */}}
          ports:
            - containerPort: 8081
              name: internal
            - containerPort: 8083
              name: health
          livenessProbe:
            httpGet:
              path: /health
              port: 8083
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /health
              port: 8083
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          args:
            - --internal-base=http://openscap-scan-internal:8081
            - --authorization-url=http://auth-internal:8081
            - --database-connection-string=postgres:postgres://
            - --database-secret=$(DB_SECRET)
            - --checklists-folder=data
          env:
            {{- include "smartcheck.service.database.env" (dict "Chart" .Chart "Release" .Release "Values" .Values "service" "openscapscan") | nindent 12 }}
            {{- include "smartcheck.proxy.env" . | nindent 12 }}
          volumeMounts:
            - name: data
              mountPath: /data
              readOnly: true
            - name: work
              mountPath: /work
            {{- include "smartcheck.db-trust-volume-mount" . | nindent 12 }}
          resources: {{ toYaml (default .Values.resources.defaults .Values.resources.openscapScan) | nindent 12 }}

        {{- with .Values.images.openscapFeedConsumer }}
        - name: openscap-feed-consumer
          {{- if $securityContextEnabled }}
          securityContext: {{ toYaml $openscapFeedConsumerContainerSecurityContext | nindent 12 }}
          {{- end }}{{/* if $securityContextEnabled */}}
          {{- $project := (default (default "deepsecurity" $imageDefaults.project) .project) }}
          {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
          {{- $tag := (default $imageDefaults.tag .tag) }}
          image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
          {{- end }}{{/* with .Values.images.openscapFeedConsumer */}}
          ports:
            - containerPort: 8083
              name: health
          livenessProbe:
            httpGet:
              path: /health
              port: 8083
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /health
              port: 8083
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          args:
            - sync
            {{- if hasKey .Values "feed" }}
            {{- if hasKey .Values.feed "openscap" }}
            {{- if hasKey .Values.feed.openscap "url" }}
            - --feed-url={{ .Values.feed.openscap.url }}
            {{- end }}{{/* if hasKey .values.feed.openscap "url" */}}
            {{- if hasKey .Values.feed.openscap "interval" }}
            - --every={{ .Values.feed.openscap.interval }}
            {{- end }}{{/* if hasKey .values.feed.openscap "interval" */}}
            {{- end }}{{/* if hasKey .Values.feed "openscap" */}}
            {{- end }}{{/* if hasKey .Values "feed" */}}
            - --authorization-token=$(ACTIVATION_CODE)
            - --initial-oval-file=/initial-oval.xml
            - --initial-checklists-directory=/initial-checklists
          env:
            {{- include "smartcheck.proxy.env" . | nindent 12 }}
            - name: ACTIVATION_CODE
              valueFrom:
                secretKeyRef:
                  name: {{ template "smartcheck.fullname" . }}-activation-code
                  key: code
          volumeMounts:
            - name: data
              mountPath: /data
          resources: {{ toYaml (default .Values.resources.defaults .Values.resources.openscapFeedConsumer) | nindent 12 }}
      nodeSelector: {{ toYaml (default .Values.nodeSelector.defaults .Values.nodeSelector.openscapScan) | nindent 8 }}
      tolerations: {{ toYaml (default .Values.tolerations.defaults .Values.tolerations.openscapScan) | nindent 8 }}
      restartPolicy: Always
      volumes:
        - name: data
          emptyDir:
            sizeLimit: {{ default "1Gi" .Values.scan.openscap.dataVolume.sizeLimit | quote }}
        - name: work
          emptyDir:
            sizeLimit: {{ default "5Gi" .Values.scan.openscap.workVolume.sizeLimit | quote }}
        {{- include "smartcheck.db-trust-volume" . | nindent 8 }}

{{ if .Values.networkPolicy.enabled }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: openscap-scan
  labels:
    service: openscap-scan
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    {{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
    {{- end }}{{/* range .Values.extraLabels */}}
spec:
  podSelector:
    matchLabels:
      service: openscap-scan
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
      {{- range $k, $v := (default (dict) .Values.extraLabels) }}
      {{ $k }}: {{ quote $v }}
      {{- end }}{{/* range .Values.extraLabels */}}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
      - podSelector:
          matchLabels:
            service: scan
            release: {{ .Release.Name }}
            heritage: {{ .Release.Service }}
            {{- range $k, $v := (default (dict) .Values.extraLabels) }}
            {{ $k }}: {{ quote $v }}
            {{- end }}{{/* range .Values.extraLabels */}}
      ports:
        - protocol: TCP
          port: 8081
    - from: # any -- this is for metrics
      ports:
        - protocol: TCP
          port: 8082
    - from: # any -- this should just be kubelet for health probes
      ports:
        - protocol: TCP
          port: 8083
  egress:
    {{- include "smartcheck.to-dns-networkpolicy" . | nindent 4 }}
    {{- include "smartcheck.to-db-networkpolicy" . | nindent 4 }}
    {{- include "smartcheck.to-internal-service-networkpolicy" (dict "Release" .Release "Values" .Values "services" (list "scan")) | nindent 4 }}
    # allow egress for feed consumer
    - to: # any
      ports:
      - protocol: TCP
        port: 80
      - protocol: TCP
        port: 443
    {{- include "smartcheck.networkpolicy.outbound" . | nindent 4 }}
{{- end }}{{/* if .Values.networkPolicy.enabled */}}
