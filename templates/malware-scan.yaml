apiVersion: v1
kind: Service
metadata:
  name: malware-scan-internal
  labels:
    service: malware-scan
    chart: {{ template "smartcheck.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  ports:
    - port: 8081
      targetPort: 8081
      protocol: TCP
      name: internal
  selector:
    service: malware-scan
    release: {{ .Release.Name }}

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: malware-scan
  labels:
    service: malware-scan
    chart: {{ template "smartcheck.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ default 1 .Values.replicas.malwareScan }}
  template:
    metadata:
      labels:
        service: malware-scan
        chart: {{ template "smartcheck.chart" . }}
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
    spec:
      {{- $imageDefaults := .Values.images.defaults }}
      {{- with .Values.images.malwareScan }}
      {{- $secret := (default $imageDefaults.imagePullSecret .imagePullSecret) | quote }}
      {{- if not (eq "" $secret) }}
      imagePullSecrets:
        - name: {{ $secret }}
      {{- end }}
      containers:
        - name: malware-scan
          {{- $project := (default (default "deepsecurity" $imageDefaults.project) .project) }}
          {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
          {{- $tag := (default $imageDefaults.tag .tag) }}

          {{- if eq (default "" .registry) "-" }}
          image: {{ printf "%s:%s" $repository $tag | quote }}
          {{- else if eq (default "-" $imageDefaults.registry) "-" }}
          image: {{ printf "%s:%s" $repository $tag | quote }}
          {{- else }}
          image: {{ printf "%s/%s:%s" (default $imageDefaults.registry .registry) $repository $tag | quote }}
          {{- end }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
          {{- end }}
          ports:
            - containerPort: 8081
              name: internal
          # TODO probes
          # livenessProbe:
          # readinessProbe:
          args: []
          env: []
          volumeMounts:
            - name: proxy-config
              mountPath: /home/argus/proxy
            - name: activation-code
              mountPath: /home/argus/license
          resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.malwareScan) | indent 12 }}
      volumes:
        - name: proxy-config
          configMap:
            name: {{ template "smartcheck.fullname" . }}-outbound-proxy
            items:
              - key: httpProxy
                path: proxy_url
        - name: activation-code
          secret:
            secretName: {{ template "smartcheck.fullname" . }}-activation-code
            items:
              - key: code
                path: code
      nodeSelector:
{{ toYaml (default .Values.nodeSelector.defaults .Values.nodeSelector.malwareScan) | indent 8 }}
      tolerations:
{{ toYaml (default .Values.tolerations.defaults .Values.tolerations.malwareScan) | indent 8 }}
      restartPolicy: Always

{{ if .Values.networkPolicy.enabled }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: malware-scan
  labels:
    service: malware-scan
    chart: {{ template "smartcheck.chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  podSelector:
    matchLabels:
      service: malware-scan
      chart: {{ template "smartcheck.chart" . }}
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
        - podSelector:
            matchLabels:
              service: scan
              chart: {{ template "smartcheck.chart" . }}
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
      ports:
        - protocol: TCP
          port: 8081
  egress:
    - to: # any
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
    - to: # any
      ports:
        - protocol: TCP
          port: 443
    - to: # any - TODO do we really need port 80? What is served on port 80?
      ports:
        - protocol: TCP
          port: 80
{{- end }}
