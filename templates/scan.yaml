apiVersion: v1
kind: Service
metadata:
  name: scan
  labels:
    service: scan
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    {{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
    {{- end }}{{/* range .Values.extraLabels */}}
spec:
  ports:
    - port: 8080
      protocol: TCP
      name: external
  selector:
    service: scan
    release: {{ .Release.Name }}

---
apiVersion: v1
kind: Service
metadata:
  name: scan-internal
  labels:
    service: scan-internal
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    {{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
    {{- end }}{{/* range .Values.extraLabels */}}
spec:
  ports:
    - port: 8081
      protocol: TCP
      name: internal
  selector:
    service: scan
    release: {{ .Release.Name }}

---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: scan
  labels:
    service: scan
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    appVersion: {{ .Chart.AppVersion }}
    metrics: include
    {{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
    {{- end }}{{/* range .Values.extraLabels */}}
spec:
  replicas: {{ default 1 .Values.replicas.scan }}
  template:
    metadata:
      labels:
        service: scan
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
        appVersion: {{ .Chart.AppVersion }}
        metrics: include
        {{- range $k, $v := (default (dict) .Values.extraLabels) }}
        {{ $k }}: {{ quote $v }}
        {{- end }}{{/* range .Values.extraLabels */}}
    spec:
      automountServiceAccountToken: false
      {{- $securityContextEnabled := .Values.securityContext.enabled }}
      {{- $securityContext := default .Values.securityContext.default .Values.securityContext.scan }}
      {{- $podSecurityContext := default .Values.securityContext.default.pod $securityContext.pod }}
      {{- $containerSecurityContext := default .Values.securityContext.default.container $securityContext.container }}
      {{- if $securityContextEnabled }}
      securityContext: {{ toYaml $podSecurityContext | nindent 8 }}
      {{- end }}{{/* if $securityContextEnabled */}}
      {{- $imageDefaults := .Values.images.defaults }}
      {{- with .Values.images.scan }}
      {{- $secret := (default (default "" $imageDefaults.imagePullSecret) .imagePullSecret) }}
      {{- if not (eq "" $secret) }}
      imagePullSecrets:
        - name: {{ $secret | quote }}
      {{- end }}{{/* with .Values.images.scan */}}
      containers:
        - name: scan
          {{- if $securityContextEnabled }}
          securityContext: {{ toYaml $containerSecurityContext | nindent 12 }}
          {{- end }}
          {{- $project := (default (default "deepsecurity" $imageDefaults.project) .project) }}
          {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
          {{- $tag := (default $imageDefaults.tag .tag) }}
          image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
          {{- end }}
          ports:
            - containerPort: 8080
              name: external
            - containerPort: 8081
              name: internal
            - containerPort: 8082
              name: metrics
            - containerPort: 8083
              name: health
          livenessProbe:
            httpGet:
              path: /health
              port: 8083
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          readinessProbe:
            httpGet:
              path: /health
              port: 8083
            initialDelaySeconds: 10
            timeoutSeconds: 5
            failureThreshold: 6
          args:
            - --internal-base=http://scan-internal:8081
            - --authorization-url=http://auth-internal:8081
            - --malware-scan-url=http://malware-scan-internal:8081
            - --content-scan-url=http://content-scan-internal:8081
            - --vulnerability-scan-url=http://vulnerability-scan-internal:8081
            - --oscap-scan-url=http://openscap-scan-internal:8081
            - --content-source-scanner-webhook-url=http://registryviews-internal:8081/api/results
            - --database-connection-string=postgres:postgres://db/scandb?sslmode=disable&connect_timeout=5 # seconds
            - --database-secret=$(DB_SECRET)
            - --cursor-encryption-secret=$(CURSOR_ENCRYPTION_SECRET)
            {{- with .Values.scan.results }}
            - --scan-retention-period={{ default 0 .ttl }}
            {{- end }}
            {{if not .Values.scan.malwareCache.enabled}}
            - --malware-scan-cache-ttl=0s
            {{end}}
          env:
            - name: PGUSER
              valueFrom:
                secretKeyRef:
                  key: database-user
                  name: {{ template "smartcheck.fullname" . }}-db
            - name: PGPASSWORD
              valueFrom:
                secretKeyRef:
                  key: database-password
                  name: {{ template "smartcheck.fullname" . }}-db
            - name: DB_SECRET
              valueFrom:
                secretKeyRef:
                  key: database-secret
                  name: {{ template "smartcheck.fullname" . }}-db
            - name: CURSOR_ENCRYPTION_SECRET
              valueFrom:
                secretKeyRef:
                  key: secret
                  name: {{ template "smartcheck.fullname" . }}-cursor
            {{- include "smartcheck.proxy.env" . | nindent 12 }}
          resources: {{ toYaml (default .Values.resources.defaults .Values.resources.scan) | nindent 12 }}
      nodeSelector: {{ toYaml (default .Values.nodeSelector.defaults .Values.nodeSelector.scan) | nindent 8 }}
      tolerations: {{ toYaml (default .Values.tolerations.defaults .Values.tolerations.scan) | nindent 8 }}
      restartPolicy: Always

{{ if .Values.networkPolicy.enabled }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: scan
  labels:
    service: scan
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    {{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
    {{- end }}{{/* range .Values.extraLabels */}}
spec:
  podSelector:
    matchLabels:
      service: scan
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
      {{- range $k, $v := (default (dict) .Values.extraLabels) }}
      {{ $k }}: {{ quote $v }}
      {{- end }}{{/* range .Values.extraLabels */}}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from:
      - podSelector:
          matchLabels:
            service: proxy
            release: {{ .Release.Name }}
            heritage: {{ .Release.Service }}
            {{- range $k, $v := (default (dict) .Values.extraLabels) }}
            {{ $k }}: {{ quote $v }}
            {{- end }}{{/* range .Values.extraLabels */}}
      ports:
        - protocol: TCP
          port: 8080
    - from:
      - podSelector:
          matchLabels:
            service: registryviews
            release: {{ .Release.Name }}
            heritage: {{ .Release.Service }}
            {{- range $k, $v := (default (dict) .Values.extraLabels) }}
            {{ $k }}: {{ quote $v }}
            {{- end }}{{/* range .Values.extraLabels */}}
      - podSelector:
          matchLabels:
            service: vulnerability-scan
            release: {{ .Release.Name }}
            heritage: {{ .Release.Service }}
            {{- range $k, $v := (default (dict) .Values.extraLabels) }}
            {{ $k }}: {{ quote $v }}
            {{- end }}{{/* range .Values.extraLabels */}}
      - podSelector:
          matchLabels:
            service: content-scan
            release: {{ .Release.Name }}
            heritage: {{ .Release.Service }}
            {{- range $k, $v := (default (dict) .Values.extraLabels) }}
            {{ $k }}: {{ quote $v }}
            {{- end }}{{/* range .Values.extraLabels */}}
      - podSelector:
          matchLabels:
            service: openscap-scan
            release: {{ .Release.Name }}
            heritage: {{ .Release.Service }}
            {{- range $k, $v := (default (dict) .Values.extraLabels) }}
            {{ $k }}: {{ quote $v }}
            {{- end }}{{/* range .Values.extraLabels */}}
      ports:
        - protocol: TCP
          port: 8081
    - from: # any -- this is for metrics
      ports:
        - protocol: TCP
          port: 8082
    - from: # any -- this should just be kubelet for health probes
      ports:
        - protocol: TCP
          port: 8083
  egress:
    {{- include "smartcheck.to-dns-networkpolicy" . | nindent 4 }}
    {{- include "smartcheck.to-db-networkpolicy" . | nindent 4 }}
    {{- include "smartcheck.to-internal-service-networkpolicy" (dict "Release" .Release "Values" .Values "services" (list "auth" "registryviews" "malware-scan" "vulnerability-scan" "content-scan" "openscap-scan")) | nindent 4 }}
    - to: # any
      ports:
      - protocol: TCP
        port: 80
      - protocol: TCP
        port: 443
      {{- range $port := .Values.networkPolicy.additionalWebhookTargetPorts }}
      - protocol: TCP
        port: {{ $port }}
      {{- end }}{{/* range .Values.additionalWebhookTargetPorts  */}}
      {{- range $port := .Values.networkPolicy.additionalRegistryPorts }}
      - protocol: TCP
        port: {{ $port }}
      {{- end }}{{/* range .Values.networkPolicy.additionalRegistryPorts */}}
    {{- include "smartcheck.networkpolicy.outbound" . | nindent 4 }}
{{- end }}{{/* if .Values.networkPolicy.enabled */}}
