apiVersion: v1
kind: Service
metadata:
  name: proxy
  annotations:
    {{ toYaml .Values.service.annotations | indent 4 | trim }}
  labels:
    service: proxy
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
spec:
  type: {{ default "LoadBalancer" .Values.service.type }}
  ports:
    - port: {{ default 443 .Values.service.httpsPort }}
      targetPort: 8443
      protocol: TCP
      name: https
    - port: {{ default 80 .Values.service.httpPort }}
      targetPort: 8080
      protocol: TCP
      name: http
{{ if .Values.registry.enabled }}
    - port: {{ default 5000 .Values.service.registryPort }}
      targetPort: 5000
      protocol: TCP
      name: registryhttps
{{- end }}

  selector:
    service: proxy
    release: {{ .Release.Name }}

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: proxy
  labels:
    service: proxy
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
    appVersion: {{ .Chart.AppVersion }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
spec:
  # We set revisionHistoryLimit to 0 because rollback should be done
  # using `helm rollback` rather than with `kubectl rollout undo`, so
  # we don't need to keep the old `ReplicaSet`s around.
  # https://kubernetes.io/docs/concepts/workloads/controllers/deployment
  revisionHistoryLimit: 0
  replicas: {{ default 1 .Values.replicas.proxy }}
  selector:
    matchLabels:
      service: proxy
      release: {{ .Release.Name }}
  template:
    metadata:
      labels:
        service: proxy
        release: {{ .Release.Name }}
        heritage: {{ .Release.Service }}
        appVersion: {{ .Chart.AppVersion }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
        {{ $k }}: {{ quote $v }}
{{- end }}
    spec:
      automountServiceAccountToken: false
{{- $securityContextEnabled := .Values.securityContext.enabled }}
{{- $securityContext := default .Values.securityContext.default .Values.securityContext.proxy }}
{{- $podSecurityContext := default .Values.securityContext.default.pod $securityContext.pod }}
{{- $containerSecurityContext := default .Values.securityContext.default.container $securityContext.container }}
{{- if $securityContextEnabled }}
      securityContext:
{{ toYaml $podSecurityContext | indent 8 }}
{{- end }}
      {{- $imageDefaults := .Values.images.defaults }}
      {{- with .Values.images.proxy }}
      {{- $secret := (default (default "" $imageDefaults.imagePullSecret) .imagePullSecret) }}
      {{- if not (eq "" $secret) }}
      imagePullSecrets:
        - name: {{ $secret | quote }}
      {{- end }}
      containers:
        - name: proxy
{{- if $securityContextEnabled }}
          securityContext:
{{ toYaml $containerSecurityContext | indent 12 }}
{{- end }}
          {{- $project := (default (default "deepsecurity" $imageDefaults.project) .project) }}
          {{- $repository := printf "%s/%s" $project (required ".repository is required!" .repository) }}
          {{- $tag := (default $imageDefaults.tag .tag) }}
          image: {{ include "image.source" (dict "repository" $repository "registry" .registry "tag" $tag "imageDefaults" $imageDefaults "digest" .digest) }}
          imagePullPolicy: {{ default (default "Always" $imageDefaults.pullPolicy) .pullPolicy }}
          {{- end }}
          ports:
            - containerPort: 8080
              name: http
            - containerPort: 8443
              name: https
{{- if .Values.registry.enabled }}
            - containerPort: 5000
              name: registryhttps
{{- end }}
          volumeMounts:
            - mountPath: /var/run
              name: varrun
            - mountPath: /var/cache/nginx
              name: varcache
            - mountPath: /secrets
              name: tls-secret
            - mountPath: /etc/nginx/argus
              name: config
          # TODO probes
          # livenessProbe:
          # readinessProbe:
          args: []
          env: []
          resources:
{{ toYaml (default .Values.resources.defaults .Values.resources.proxy) | indent 12 }}
      volumes:
        - name: varrun
          emptyDir:
            sizeLimit: 1Mi
        - name: varcache
          emptyDir:
            sizeLimit: 10Mi
        - name: tls-secret
          secret:
{{- if not .Values.certificate.secret.name }}
            secretName: {{ template "smartcheck.fullname" . }}-tls-certificate
            items:
              - key: certificate
                path: default_ssl.crt
              - key: privateKey
                path: default_ssl.key
{{- else }}
            secretName: {{ .Values.certificate.secret.name }}
            items:
              - key: {{ required "certificate.secret.certificate is required when certificate.secret.name is set" .Values.certificate.secret.certificate }}
                path: default_ssl.crt
              - key: {{ required "certificate.secret.privateKey is required when certificate.secret.name is set" .Values.certificate.secret.privateKey }}
                path: default_ssl.key
{{- end }}
        - name: config
          configMap:
            name: {{ template "smartcheck.fullname" . }}-proxy
            items:
              - key: proxy.conf
                path: proxy.conf
      nodeSelector:
{{ toYaml (default .Values.nodeSelector.defaults .Values.nodeSelector.proxy) | indent 8 }}
      tolerations:
{{ toYaml (default .Values.tolerations.defaults .Values.tolerations.proxy) | indent 8 }}
      restartPolicy: Always
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ template "smartcheck.fullname" . }}-proxy
  labels:
    service: {{ template "smartcheck.fullname" . }}-proxy
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
data:
  proxy.conf: |
    {{ $apiRateLimiting := default (dict) (default (dict) .Values.rateLimiting).api -}}
    #
    # Code generated by helm. DO NOT EDIT.
    #
    limit_req_zone $binary_remote_addr zone=limit:{{ default 10 $apiRateLimiting.size }}m rate={{ default 10 $apiRateLimiting.rate }}r/s;

    # List of application servers
    upstream frontend_server {
      server frontend:8080;
    }
    upstream scan_server {
      server scan:8080;
    }
    upstream auth_server {
      server auth:8080;
    }
    upstream docs_server {
      server docs:8080;
    }
    upstream registryviews_server {
      server registryviews:8080;
    }
    upstream license_server {
      server license:8080;
    }

    # Configuration for the server
    server {

      # Running port
      listen [::]:8443 ssl http2 default_server;
      listen 8443 ssl http2 default_server;

      include ssl/ssl.conf;

      charset utf-8;

      # Proxying the connections
      location / {
        proxy_pass         http://frontend_server;
        proxy_redirect     off;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host $server_name;

        add_header         Vary "Authorization" always;
      }

      location /api {
        limit_req zone=limit burst={{ default 10 $apiRateLimiting.burst }};
        limit_req_status {{ default 429 $apiRateLimiting.status }};

        proxy_pass         http://scan_server;
        proxy_redirect     off;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host $server_name;

        add_header         Vary "Authorization" always;
      }

      location /docs/ {
        proxy_pass         http://docs_server;
        proxy_redirect     off;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host $server_name;

        add_header         Vary "Authorization" always;
      }

      location ~ /saml/?$ {
        limit_req zone=limit burst={{ default 10 $apiRateLimiting.burst }};
        limit_req_status {{ default 429 $apiRateLimiting.status }};

        proxy_pass         http://auth_server;
        proxy_redirect     off;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;

        add_header         Vary "Authorization" always;
      }

      location ~ /api/(users|roles|sessions|identity-providers) {
        limit_req zone=limit burst={{ default 10 $apiRateLimiting.burst }};
        limit_req_status {{ default 429 $apiRateLimiting.status }};

        proxy_pass         http://auth_server;
        proxy_redirect     off;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host $server_name;

        add_header         Vary "Authorization" always;
      }

      location ~ /api/registries {
        limit_req zone=limit burst={{ default 10 $apiRateLimiting.burst }};
        limit_req_status {{ default 429 $apiRateLimiting.status }};

        proxy_pass         http://registryviews_server;
        proxy_redirect     off;
        proxy_set_header   Host $host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host $server_name;

        add_header         Vary "Authorization" always;
      }

      location ~ /api/license {
        limit_req zone=limit burst={{ default 10 $apiRateLimiting.burst }};
        limit_req_status {{ default 429 $apiRateLimiting.status }};

        proxy_pass         http://license_server;

        add_header         Vary "Authorization" always;
      }
    }
{{ if .Values.registry.enabled }}

    upstream registry_server {
      server registry:5000;
    }

    # Configuration for the registry
    server {

      # Running port
      listen [::]:5000 ssl http2 default_server;
      listen 5000 ssl http2 default_server;

      include ssl/ssl.conf;

      charset utf-8;

      # disable any limits to avoid HTTP 413 for large image uploads
      client_max_body_size 0;

      # required to avoid HTTP 411: see Issue #1486 (https://github.com/moby/moby/issues/1486)
      chunked_transfer_encoding on;

      # required to avoid HTTP 405 Not allowed.
      location / {
        proxy_set_header   Host $http_host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host $server_name;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_read_timeout 900;

        add_header         Vary "Authorization" always;
      }

      location /v2/ {

        # Do not allow connections from docker 1.5 and earlier
        # docker pre-1.6.0 did not properly set the user agent on ping, catch "Go *" user agents
        if ($http_user_agent ~ "^(docker\/1\.(3|4|5(?!\.[0-9]-dev))|Go ).*$" ) {
          return 404;
        }

        proxy_pass         https://registry_server;
        proxy_redirect     off;
        proxy_set_header   Host $http_host;
        proxy_set_header   X-Real-IP $remote_addr;
        proxy_set_header   X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host $server_name;
        proxy_set_header   X-Forwarded-Proto $scheme;
        proxy_read_timeout 900;

        add_header         Vary "Authorization" always;
      }
    }
{{- end }}


{{ if .Values.networkPolicy.enabled }}
---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: proxy
  labels:
    service: proxy
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
    {{ $k }}: {{ quote $v }}
{{- end }}
spec:
  podSelector:
    matchLabels:
      service: proxy
      release: {{ .Release.Name }}
      heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
      {{ $k }}: {{ quote $v }}
{{- end }}
  policyTypes:
    - Ingress
    - Egress
  ingress:
    - from: # any
      ports:
        - protocol: TCP
          port: 8080
    - from: # any
      ports:
        - protocol: TCP
          port: 8443
{{ if .Values.registry.enabled }}
    - from: # any
      ports:
        - protocol: TCP
          port: 5000
{{- end }}
  egress:
    - to:
        - podSelector:
            matchLabels:
              service: frontend
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
{{- end }}
        - podSelector:
            matchLabels:
              service: scan
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
{{- end }}
        - podSelector:
            matchLabels:
              service: registryviews
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
{{- end }}
        - podSelector:
            matchLabels:
              service: auth
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
{{- end }}
        - podSelector:
            matchLabels:
              service: docs
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
{{- end }}
        - podSelector:
            matchLabels:
              service: license
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
{{- end }}
      ports:
        - protocol: TCP
          port: 8080
{{ if .Values.registry.enabled }}
    - to:
        - podSelector:
            matchLabels:
              service: registry
              release: {{ .Release.Name }}
              heritage: {{ .Release.Service }}
{{- range $k, $v := (default (dict) .Values.extraLabels) }}
              {{ $k }}: {{ quote $v }}
{{- end }}
      ports:
        - protocol: TCP
          port: 5000
{{- end }}
    - to: # any
      ports:
        - protocol: TCP
          port: 53
        - protocol: UDP
          port: 53
{{- end }}
